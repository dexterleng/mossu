<h1>Register a new user</h1>

<form id="register-form">
  <div class="form-group">
    <label for="input-email">Email address</label>
    <input type="email" class="form-control" id="input-email" aria-describedby="emailHelp" placeholder="Enter email">
  </div>
  <div class="form-group">
    <label for="input-username">Username</label>
    <input type="text" class="form-control" id="input-username">
  </div>
  <div class="form-group">
    <label for="input-password">Password</label>
    <input type="password" class="form-control" id="input-password" placeholder="Password">
  </div>
  <div class="form-group">
    <label for="input-confirm-password">Confirm Password</label>
    <input type="password" class="form-control" id="input-confirm-password" placeholder="Password">
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>

<script>

let jwt;

main();

function main() {
  jwt = localStorage.getItem('jwt');

  if (jwt === null || jwt === undefined) {
    alert("You must be logged in to register a new user.");
    window.location.replace(`/ui/login/`);
    return;
  }
}


$("#register-form").submit(function (e) {
  e.preventDefault();

  const username = $("#input-username").val();
  const email = $("#input-email").val();
  const password = $("#input-password").val();
  const password_confirmation = $("#input-confirm-password").val();

  makeApiRequest({
    url: '/auth/signup',
    type: 'post',
    contentType: "application/json",
    data: JSON.stringify({
      user: {
        username, email, password, password_confirmation
      }
    }),
    headers: {
      "Authorization": `Bearer ${jwt}`
    },
  })
    .then(r => alert('User registered.'))
    .catch(e => {
      alert('Error. Please check the logs for error.');
      console.log(e);
    })

  return false;
})

function ajaxPromise(ajaxOptions) {
  return new Promise((resolve, reject) => {
    $.ajax(ajaxOptions)
        .done(function (data) { resolve(data) })
        .fail(function (jqXHR) { reject(jqXHR) });
  });
}

function retryingAjax(ajaxOptions, maxRetries, timeoutMs) {
    const thunk = () => ajaxPromise(ajaxOptions);
    const retry = (fn, maxRetries, timeoutMs) => new Promise((resolve, reject) => {
        fn()
            .then(resolve)
            .catch((e) => {
                if (maxRetries === 1 || (e.status && e.status !== 500)) {
                    return reject(e);
                }
                console.log('retrying failed promise...');
                setTimeout(() => {
                    retry(fn, maxRetries - 1, timeoutMs).then(resolve).catch(reject);
                }, timeoutMs);
            })
    });
    return retry(thunk, maxRetries, timeoutMs);
}

async function makeApiRequest(ajaxOptions, maxRetries = 1, timeoutMs = 1000) {
  const res = await retryingAjax(ajaxOptions, maxRetries, timeoutMs);
  return res;
}

</script>
